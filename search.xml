<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客开发项目学习</title>
      <link href="/2024/10/25/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/10/25/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>为了复习之前学习的前端知识还有快速学习一下express，我跟着B站上的一个教程做了个全栈的博客相关功能实现的全栈项目（<a href="https://www.bilibili.com/video/BV1t3411F7VH">这是链接</a>）。做完项目后对自己学习或者复习到的一些内容做点整理</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>后端方面主要就是通过express对数据库的CRUD。在app.js中引入相关的依赖（express，path，multer，数据库相关），实例化一个express对象：<code>const app = express()</code>，设置中间件（跨域请求处理、JSON处理、上传、静态路径、token验证、路由设置）,最后在对应端口设置监听：<code>app.listen(port,callback)</code></p><h3 id="路由的设置"><a href="#路由的设置" class="headerlink" title="路由的设置"></a>路由的设置</h3><p>路由用于定义处理 HTTP 请求的端点，将路由文件全放入router文件夹下方便统一管理，在路由文件中引入依赖（express、router、数据库相关，以及其他工具函数和实现功能所需要的依赖等）。在路由模块中通过实现诸如<code>router.get(&#39;/xx&#39;,(req,res)=&gt;xxx)</code>等方法后，在路由模块末尾导出<code>module.exports = router</code>,最后在主文件app.js中使用中间件引入<code>app.use(&#39;/xxx&#39;,require(routerPath))</code>,访问时在对应端口的<code>/xx/xxx</code>下</p><h3 id="数据库的连接和使用"><a href="#数据库的连接和使用" class="headerlink" title="数据库的连接和使用"></a>数据库的连接和使用</h3><p>这里我使用的是MySQL+(mysql2&#x2F;promise)包。创建一个存放工具函数的文件夹（可以存放数据库相关和id生成之类的函数），创建一个文件<code>db.js</code>,引入mysql相关依赖，根据该包的文档创建连接对象，最后<code>module.exports=&#123;db,genid&#125;</code>，在其他需要该模块的文件中引入。</p><h3 id="登陆和token的验证"><a href="#登陆和token的验证" class="headerlink" title="登陆和token的验证"></a>登陆和token的验证</h3><p>个人觉得该教程中的实现不太好，待我进一步学习。</p><h3 id="关于next"><a href="#关于next" class="headerlink" title="关于next()"></a>关于next()</h3><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端是用vue3写的，实践中主要是前面学的东西太久没用忘记了，需要重新捡起来一下</p><h3 id="inject和provide"><a href="#inject和provide" class="headerlink" title="inject和provide"></a>inject和provide</h3><p>父组件通过 <code>provide</code> 提供数据，子组件使用 <code>inject</code> 获取数据。<br>例如在本项目中先在入口文件<code>main.js</code>中设置axios：<code>axios.defaults.baseURL=&quot;http://localhost:8080&quot;</code>，然后通过<code>app.provide(&quot;axios&quot;,axios)</code>并且在需要使用aixos的文件中<code>const axios = inject(&quot;axios&quot;)</code>引入，（注意在app实例化后），从而避免在组件或者路由中重新设置。<br><code>provide</code>也可以在vue组件中的父组件使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">   const user = reactive(&#123; name: &#x27;Alice&#x27;, age: 25 &#125;);</span><br><span class="line">   provide(&#x27;user&#x27;, user);</span><br><span class="line"></span><br><span class="line">   const message = &#x27;Hello from parent!&#x27;;</span><br><span class="line">   provide(&#x27;greeting&#x27;, message);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后直接在子组件中使用(provide 数据只能在子组件（包括深层嵌套组件）中被注入)</p><h3 id="路由相关"><a href="#路由相关" class="headerlink" title="路由相关"></a>路由相关</h3><p>创建专门的router.js文件引入vue-router进行配置，定义路由规则routes，然后<code>const router = createRouter(&#123;path:&quot;/xxx&quot;,name:xxx,component:()=&gt;import(&quot;path/xxx.vue&quot;)&#125;)</code>并且<code>export &#123;router,routes&#125;</code>，在入口文件main.js引入:<code>app.use(router);</code><br>路由的视图组件<code>xxx.vue</code>通常放在<code>src/views</code>目录下。在需要的应用组件中，使用 <code>&lt;router-link&gt;</code> 来导航不同的路由，并使用 <code>&lt;router-view&gt;</code> 来渲染当前匹配的视图。（创建视图组件时，不需要在每个视图组件中显式引入 router.js。视图组件（XXX.vue）只需定义其内容和逻辑，路由配置已经在 router.js 中完成，并在 main.js 中全局注册。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;nav&gt;</span><br><span class="line">     &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">     &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">   &lt;/nav&gt;</span><br><span class="line">   &lt;router-view /&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在本项目中由于跳转路由的按钮选项是引入的naiviUI，所以需要为跳转路由写逻辑（使用<code>useRouter().push(&quot;/xxx&quot;)</code>）,而没使用router-link标签。</p><h4 id="学到的新的东西"><a href="#学到的新的东西" class="headerlink" title="学到的新的东西"></a>学到的新的东西</h4><ul><li>路由守卫：如果需要在路由进入或离开时执行一些逻辑，可以使用路由守卫。在main.js中：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里可以添加逻辑，例如认证检查</span></span><br><span class="line">  <span class="title function_">next</span>();  <span class="comment">// 必须调用 next() 以继续导航</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>路由嵌套：在需要添加子路由的视图页面中使用<router-view />并在配置文件<code>router.js</code>中的路由规则<code>routes</code>中视图页面对应的对象添加一个Children属性即可</li><li>useRoute()和useRouter():这是<code>vue-router</code>中的两个重要的 <strong>Composition</strong> API 函数,useRoute() 用于获取当前路由的信息，包括路径、参数、查询字符串等。返回一个响应式对象，包含当前路由的信息。useRouter() 用于访问路由实例，提供了编程式导航和路由控制的方法。如 <code>push()</code>,<code> replace()</code>,<code>go()</code> 等<br>如本项目中跳转页面时添加查询参数和详情页面获取该路由对应的查询参数:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转页面时添加查询参数, 使用router-link时的写法：&lt;router-link :to=&quot;&#123; path: &#x27;/about&#x27;, query: &#123; id: 123, name: &#x27;Alice&#x27; &#125; &#125;&quot;&gt;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toDetail</span> = <span class="keyword">async</span> (<span class="params">blog</span>)=&gt;&#123;</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/detail&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:blog.<span class="property">id</span>&#125;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//详情页面获取该路由对应的查询参数</span></span><br><span class="line"><span class="keyword">const</span> route=<span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/blog/detail?id=&quot;</span>+route.<span class="property">query</span>.<span class="property">id</span>); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">useRoute() 返回的对象：当你调用 useRoute() 时，它返回的对象是响应式的。这意味着，当路由发生变化（如导航到不同的页面）时，模板会自动更新。 </span></span><br><span class="line"><span class="comment">可直接在模板中使用：</span></span><br><span class="line"><span class="comment">&lt;p&gt;ID: &#123;&#123; route.query.id &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;Name: &#123;&#123; route.query.name &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu上开始学习docker</title>
      <link href="/2024/10/21/docker-learning-start/"/>
      <url>/2024/10/21/docker-learning-start/</url>
      
        <content type="html"><![CDATA[<p>之前一直是在Windows上学习，对于linux（centOS）只是在跟着b站上的视频学习一些基础的操作和命令。还有之前一直是在学习前端相关的内容，现在想了解一些后端的技术栈，于是我开始在Ubuntu上学习docker，顺便熟悉一下ubuntu。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Ubuntu24.04.1、VM虚拟机</p><h2 id="docker的安装及ubuntu命令的熟悉"><a href="#docker的安装及ubuntu命令的熟悉" class="headerlink" title="docker的安装及ubuntu命令的熟悉"></a>docker的安装及ubuntu命令的熟悉</h2><p>先在终端中更新apt命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update </span><br><span class="line"><span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure><p>然后安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install  ca-certificates curl gnupg lsb-release -y</span><br></pre></td></tr></table></figure><p>以下是这些包的作用：</p><ul><li><p>ca-certificates：用于管理和存储SSL&#x2F;TLS证书。这些证书确保在通过HTTPS进行安全连接时，服务器的身份可以被验证。</p></li><li><p>curl：一个用于从命令行传输数据的工具，支持多种协议，包括HTTP和HTTPS。通常用来下载文件或与API进行交互。</p></li><li><p>gnupg：GNU隐私保护系统，用于加密和签名数据及通信。它提供了生成和管理公钥&#x2F;私钥对的功能。</p></li><li><p>lsb-release：提供Linux标准基础（LSB）信息的工具，用于识别当前Linux发行版的版本号和相关信息。<br>其中-y参数表示对自动确认安装</p></li></ul><h3 id="添加Docker的GPG-Key"><a href="#添加Docker的GPG-Key" class="headerlink" title="添加Docker的GPG Key"></a>添加Docker的GPG Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">$ <span class="built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure><ul><li>第一行命令创建&#x2F;etc&#x2F;apt&#x2F;keyrings 目录，权限设置为 0755（即目录所有者可以读、写、执行，其他用户只能读和执行）。这个目录用于存放 APT 软件源的 GPG 密钥。</li><li>第二行从 Docker 官方网站下载其 GPG 密钥，并保存到 &#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;docker.asc 文件中。GPG（GNU Privacy Guard）密钥用于验证从 Docker 仓库下载的软件包的完整性和真实性。</li><li>第三行为 GPG 密钥文件赋予所有用户的读取权限。确保系统中的所有用户或进程都能读取这个密钥，以便 APT 在安装 Docker 包时能进行验证。</li></ul><p>我在进行第二行命令时出现了报错<code>curl: (35) Recv failure: Connection reset by peer</code>，更新了ca-certificates:<code>sudo apt update &amp;&amp; sudo apt install --reinstall ca-certificates</code>之后正常执行</p><h3 id="安装密钥后添加到apt存储库中"><a href="#安装密钥后添加到apt存储库中" class="headerlink" title="安装密钥后添加到apt存储库中"></a>安装密钥后添加到apt存储库中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>然后就可以正式开始安装了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y</span><br></pre></td></tr></table></figure><p>下列命令将本地用户添加到 docker 组，以便本地用户可以不使用 sudo 运行 docker 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> groupadd docker</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ newgrp docker</span><br><span class="line">$ docker --version</span><br></pre></td></tr></table></figure><p>检查docker服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status docker</span><br></pre></td></tr></table></figure><p>执行<code>docker run hello-world</code>报错，需要更换源</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>在网上搜索了些可用的镜像源后更改&#x2F;etc&#x2F;docker&#x2F;daemon&#x2F;json后，<code>sudo systemctl restart docker</code><br>后已经能够成功运行</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 后端 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/14/hello-world/"/>
      <url>/2024/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> helloWorld </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
