<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>在ubuntu上开始学习docker</title>
      <link href="/2024/10/21/docker-learning-start/"/>
      <url>/2024/10/21/docker-learning-start/</url>
      
        <content type="html"><![CDATA[<p>之前一直是在Windows上学习，对于linux（centOS）只是在跟着b站上的视频学习一些基础的操作和命令。还有之前一直是在学习前端相关的内容，现在想了解一些后端的技术栈，于是我开始在Ubuntu上学习docker，顺便熟悉一下ubuntu。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Ubuntu24.04.1、VM虚拟机</p><h2 id="docker的安装及ubuntu命令的熟悉"><a href="#docker的安装及ubuntu命令的熟悉" class="headerlink" title="docker的安装及ubuntu命令的熟悉"></a>docker的安装及ubuntu命令的熟悉</h2><p>先在终端中更新apt命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update </span><br><span class="line"><span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure><p>然后安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install  ca-certificates curl gnupg lsb-release -y</span><br></pre></td></tr></table></figure><p>以下是这些包的作用：</p><ul><li><p>ca-certificates：用于管理和存储SSL&#x2F;TLS证书。这些证书确保在通过HTTPS进行安全连接时，服务器的身份可以被验证。</p></li><li><p>curl：一个用于从命令行传输数据的工具，支持多种协议，包括HTTP和HTTPS。通常用来下载文件或与API进行交互。</p></li><li><p>gnupg：GNU隐私保护系统，用于加密和签名数据及通信。它提供了生成和管理公钥&#x2F;私钥对的功能。</p></li><li><p>lsb-release：提供Linux标准基础（LSB）信息的工具，用于识别当前Linux发行版的版本号和相关信息。<br>其中-y参数表示对自动确认安装</p></li></ul><h3 id="添加Docker的GPG-Key"><a href="#添加Docker的GPG-Key" class="headerlink" title="添加Docker的GPG Key"></a>添加Docker的GPG Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">$ <span class="built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure><ul><li>第一行命令创建&#x2F;etc&#x2F;apt&#x2F;keyrings 目录，权限设置为 0755（即目录所有者可以读、写、执行，其他用户只能读和执行）。这个目录用于存放 APT 软件源的 GPG 密钥。</li><li>第二行从 Docker 官方网站下载其 GPG 密钥，并保存到 &#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;docker.asc 文件中。GPG（GNU Privacy Guard）密钥用于验证从 Docker 仓库下载的软件包的完整性和真实性。</li><li>第三行为 GPG 密钥文件赋予所有用户的读取权限。确保系统中的所有用户或进程都能读取这个密钥，以便 APT 在安装 Docker 包时能进行验证。</li></ul><p>我在进行第二行命令时出现了报错<code>curl: (35) Recv failure: Connection reset by peer</code>，更新了ca-certificates:<code>sudo apt update &amp;&amp; sudo apt install --reinstall ca-certificates</code>之后正常执行</p><h3 id="安装密钥后添加到apt存储库中"><a href="#安装密钥后添加到apt存储库中" class="headerlink" title="安装密钥后添加到apt存储库中"></a>安装密钥后添加到apt存储库中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>然后就可以正式开始安装了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y</span><br></pre></td></tr></table></figure><p>下列命令将本地用户添加到 docker 组，以便本地用户可以不使用 sudo 运行 docker 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> groupadd docker</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ newgrp docker</span><br><span class="line">$ docker --version</span><br></pre></td></tr></table></figure><p>检查docker服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status docker</span><br></pre></td></tr></table></figure><p>执行<code>docker run hello-world</code>报错，需要更换源</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>在网上搜索了些可用的镜像源后更改&#x2F;etc&#x2F;docker&#x2F;daemon&#x2F;json后，<code>sudo systemctl restart docker</code><br>后已经能够成功运行</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu docker 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/14/hello-world/"/>
      <url>/2024/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> helloWorld </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
