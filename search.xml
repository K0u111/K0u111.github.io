<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>对近期的反思</title>
      <link href="/2025/01/14/%E5%AF%B9%E8%BF%91%E6%9C%9F%E7%9A%84%E5%8F%8D%E6%80%9D/"/>
      <url>/2025/01/14/%E5%AF%B9%E8%BF%91%E6%9C%9F%E7%9A%84%E5%8F%8D%E6%80%9D/</url>
      
        <content type="html"><![CDATA[<p>已经有一段时间没有写博客了，逐渐没有刚开始搭建博客后写博客的热情，本来说在博客上记录的学习日志的，结果还是习惯性的在本地记笔记。一是期末确实有点忙，<del>二是我确实比较懒</del>。我考虑过一段时间是否要舍弃这个博客，想了想还是算了。之后等本地一些笔记完善的差不多再迁移到博客上。<br>最近开始准备考研了，也会写写算法题之类的，前端后端这些也有一段时间没碰啦，最近发现好像忘的差不多了，要慢慢捡起咯。就这样吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 反思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vite的深入学习</title>
      <link href="/2024/11/01/vite%E7%9A%84%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/11/01/vite%E7%9A%84%E6%B7%B1%E5%85%A5%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>记录我对vite原理的学习，这里是学习所参考的<a href="https://www.bilibili.com/video/BV1GN4y1M7P5">视频</a></p><h2 id="构建工具的作用"><a href="#构建工具的作用" class="headerlink" title="构建工具的作用"></a>构建工具的作用</h2><ul><li>模块化开发支持：支持直接从node_modules中引入代码以及多种模块化支持</li><li>比如babel语法降级、less、ts语法转换（不是构建工具做的，而是构建工具将这些语法对应的处理工具集成进来自动化处理）</li><li>提高项目性能 ：压缩文件，代码分割</li><li>优化开发体验：如热更新、解决跨域问题等</li></ul><h2 id="vite脚手架"><a href="#vite脚手架" class="headerlink" title="vite脚手架"></a>vite脚手架</h2><p>之前一直困惑我的<code>pnpm create vite</code>，实际上它只是安装了<code>create-vite</code>脚手架并内置了vite，就像使用vue-cli也会内置webpack</p><h2 id="vite的预构建"><a href="#vite的预构建" class="headerlink" title="vite的预构建"></a>vite的预构建</h2><p>Vite 为了加快开发服务器启动速度和提高依赖模块加载效率的一项优化机制。它的核心思想是利用 <code>esbuild</code> 在启动时预先对 <strong>第三方依赖</strong> 进行快速打包，生成一个更高效的依赖模块，从而加快项目开发中的依赖加载。</p><h3 id="为什么要依赖预构建？"><a href="#为什么要依赖预构建？" class="headerlink" title="为什么要依赖预构建？"></a>为什么要依赖预构建？</h3><ul><li>提高开发启动速度：现代 JavaScript 应用通常依赖多个第三方库，这些库通常包含许多模块、深层依赖和模块格式（如 CommonJS 和 ESModule）。直接加载这些依赖会使开发服务器变慢。预构建将这些复杂的依赖提前打包成单一模块，提升加载效率。</li><li>统一模块格式：一些第三方库仍然使用 CommonJS 格式，这与 ESModule 不兼容。Vite 在预构建阶段会将所有依赖统一转换为 ESModule 格式，以确保浏览器原生支持。</li><li>优化依赖解析：通过预构建，Vite 可以将大型依赖压缩为较小的文件，从而减少 HTTP 请求次数，提高依赖的解析速度。</li></ul><h2 id="vite使用pnpm-run-dev启动开发服务器的原理"><a href="#vite使用pnpm-run-dev启动开发服务器的原理" class="headerlink" title="vite使用pnpm run dev启动开发服务器的原理"></a>vite使用<code>pnpm run dev</code>启动开发服务器的原理</h2><p>类似使用nodejs开启一个后端服务器，然后服务器会读取本地的文件并且呈现在浏览器页面。读取本地的vue文件时会进行一些处理转化为JS文件从而让浏览器可以识别并且加载</p><h2 id="vite对CSS的处理"><a href="#vite对CSS的处理" class="headerlink" title="vite对CSS的处理"></a>vite对CSS的处理</h2><p>vite天生支持对CSS文件的处理。vite在读取到main.js中引用到了Index.css，会直接使用fs模块去读取index.css的文件内容，再直接创建一个style标签将index.css的内容复制到里面。再将style标签插入到index.html（入口文件）中的head中，将该CSS文件中的内容直接替换为JS脚本（方便热更新或者CSS模块化），同时设置Content-Type为js从而使浏览器以JS的方式解析后缀为CSS的文件。<br>关于CSS模块化（module.css）：CSS 模块化的核心思想是将样式与组件或模块绑定，而不是在全局作用域中定义。这意味着每个组件都有自己的样式，避免了命名冲突和样式污染。CSS Modules 会将每个 CSS 类名转换为唯一的标识符，以确保样式的局部作用域。：</p><h2 id="vite在服务端处理路径的时候用到path"><a href="#vite在服务端处理路径的时候用到path" class="headerlink" title="vite在服务端处理路径的时候用到path"></a>vite在服务端处理路径的时候用到path</h2><p>在node端读取文件时遇到相对路径时会尝试去拼接成绝对路径，拼接规则为<code>process.cwd() + 相对路径</code>，其中<code>process.cwd()</code>为执行node命令时的当前目录。这时候需要引入path来处理路径的问题。</p><h2 id="vite对静态资源的处理"><a href="#vite对静态资源的处理" class="headerlink" title="vite对静态资源的处理"></a>vite对静态资源的处理</h2><p>在服务端，除了动态API，其他基本上都被视为静态资源。vite对静态资源基本上是开箱即用。</p><h3 id="学到的其他知识"><a href="#学到的其他知识" class="headerlink" title="学到的其他知识"></a>学到的其他知识</h3><p>在js中导入图片时，<code>import img from &quot;./assets/images/img.png?raw&quot;</code>后面的raw参数，?raw 参数通常用于指示构建工具（如 Vite 或 Webpack）以原始文本形式导入图片文件。这意味着你会获得该图片的 Base64 编码字符串，而不是图片文件的路径。这样raw参数在处理SVG的时候有作用。<br>buffer对象：Buffer 对象用于处理二进制数据。它是 Node.js 提供的一个全局对象，主要用于在网络通信、文件读写等场景中处理原始数据流。</p><h2 id="打包后的文件（生产环境）"><a href="#打包后的文件（生产环境）" class="headerlink" title="打包后的文件（生产环境）"></a>打包后的文件（生产环境）</h2><p>打包后的dist目录中的index.html引用其他静态文件是通过绝对路径，所以能否访问到文件是由根目录<code>/</code>决定的，因此直接浏览器打开index.html或者在vue项目中打开live server无法正确访问。而直接打开dist目录或者部署到服务器上后是正常的。</p><h3 id="为什么打包后的静态资源名称带有hash值？"><a href="#为什么打包后的静态资源名称带有hash值？" class="headerlink" title="为什么打包后的静态资源名称带有hash值？"></a>为什么打包后的静态资源名称带有hash值？</h3><p>浏览器有缓存机制，只要静态资源名字不改，就会直接使用缓存的。</p><h2 id="vite插件"><a href="#vite插件" class="headerlink" title="vite插件"></a>vite插件</h2><p>在vite运行的生命周期的不同阶段进行调用以达到不同目的。<br>插件学习从简到繁，视频中实现插件的方式可以多看几次。</p><h2 id="vite和ts的结合"><a href="#vite和ts的结合" class="headerlink" title="vite和ts的结合"></a>vite和ts的结合</h2><p>使用vite-plugin-checker插件，在vite.config.ts中配置。<br>在tsconfig.json文件下配置ts检查手段和规则：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;conpilerOption&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;skipLibCheck&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//是否跳过node_modules目录的检查</span></span><br><span class="line">    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="comment">//这里修改编译后的ES版本</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>在package.json文件中script选项的build选项中改为<code>&quot;build&quot;:&quot;tsc __noEmit &amp;&amp; vite build&quot;</code>可以在打包前进行类型检查，未通过就不打包。<br>在vite-env.d.ts通过三斜线命令配置环境变量。</p><h3 id="学到的其他知识-1"><a href="#学到的其他知识-1" class="headerlink" title="学到的其他知识"></a>学到的其他知识</h3><p>import.meta 是一个特定于模块的对象，提供有关当前模块的信息。它在 JavaScript 的 ES模块（ESM）中可用。</p><h2 id="vite处理跨域"><a href="#vite处理跨域" class="headerlink" title="vite处理跨域"></a>vite处理跨域</h2><p>Vite 使用配置代理 (Proxy) 的方式来实现跨域请求。 提供了 server.proxy 配置选项，允许我们设置请求代理，将前端的请求转发到指定的后端服务器，以绕过浏览器的跨域限制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://example.com&#x27;</span>, <span class="comment">// 代理的目标地址</span></span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,            <span class="comment">// 是否改变请求源</span></span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&#x27;&#x27;</span>), <span class="comment">// 重写路径</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="vite性能的优化"><a href="#vite性能的优化" class="headerlink" title="vite性能的优化"></a>vite性能的优化</h2><p>性能优化包括以下几个方面：</p><ul><li><p>开发时构建速度优化</p></li><li><p>页面性能指标：和我们怎么去写代码有关</p><ul><li>首屏渲染时：<ul><li>懒加载：需要用代码去实现</li><li>http优化：协商缓存和强缓存</li><li>协商缓存：是否缓存需要和后端协商。</li><li>强缓存：服务端给响应头添加字段，客户端会记住字段，在失效时间之前无论如何刷新页面，浏览器都不会重新请求，而是从缓存里面取</li><li>页面中最大元素渲染时长</li><li>……</li></ul></li></ul></li><li><p>js逻辑：</p><ul><li>副作用的清除：组件是会频繁挂载和卸载。如设置了计时器，在卸载时不清除，下次开启计时器相当于开启了两个线程。   </li><li>浏览器渲染的原理（这里需要后面再学习了）</li><li>实现如防抖节流或者使用原生js的API没有性能的优化（可以使用lodash.js库）</li><li>对作用域的控制：<br>如<code>for（let  i=0, len = arr.length; i &lt; len;i++）</code>只会访问一次arr.length所在的window作用域，如果写成<code>for(let i = 0; i &lt; arr.length; i++)</code>就会访问很多次。</li></ul></li><li><p>CSS：关注继承和嵌套，能继承的就不要重复写</p></li><li><p>构建（rollup）的优化:优化体积、压缩图片、CDN加载、分包等。</p></li></ul><h3 id="构建优化"><a href="#构建优化" class="headerlink" title="构建优化"></a>构建优化</h3><h4 id="分包策略"><a href="#分包策略" class="headerlink" title="分包策略"></a>分包策略</h4><p>比如说引入一个依赖，代码被build后有很一部分的代码是属于依赖，就算修改一点代码再重新打包又会导致整个文件hash值改变，然而依赖部分打包后的代码时不变的，浏览器却又需要重新请求，造成资源浪费。<br>所以分包就是把一些不会常规更新的代码单独打包处理。</p><h4 id="gzip压缩"><a href="#gzip压缩" class="headerlink" title="gzip压缩"></a>gzip压缩</h4><p>可以通过插件来实现。服务端直接读取gzip文件（.gz后缀），需要设置响应头</p><h4 id="动态导入"><a href="#动态导入" class="headerlink" title="动态导入"></a>动态导入</h4><p>在 JavaScript 中，当使用 import 关键字导入一个模块时，导入的模块会立即执行其所有顶层代码。<br>动态导入（Dynamic Import）是一种在代码运行时按需加载模块的方式。动态导入可以通过 import() 函数实现，它返回一个 Promise，用于异步加载模块。这在需要按需加载、分离代码、优化加载性能的场景中非常有用，比如路由懒加载或按需加载组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">&#x27;./module.js&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用加载的模块</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="title function_">someFunction</span>();</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 处理加载失败的情况</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Failed to load module:&quot;</span>, error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><h4 id="CDN加速"><a href="#CDN加速" class="headerlink" title="CDN加速"></a>CDN加速</h4><h2 id="vite的配置文件"><a href="#vite的配置文件" class="headerlink" title="vite的配置文件"></a>vite的配置文件</h2><h3 id="配置文件的语法提示"><a href="#配置文件的语法提示" class="headerlink" title="配置文件的语法提示"></a>配置文件的语法提示</h3><p>对配置文件做一些特殊处理，如<code>import &#123; defineConfig &#125; from &#39;vite&#39;</code>或者使用注释＋@</p><h3 id="vite环境变量的配置"><a href="#vite环境变量的配置" class="headerlink" title="vite环境变量的配置"></a>vite环境变量的配置</h3><p>（这里需要多看几遍,也可以参考<a href="https://vitejs.cn/vite3-cn/guide/env-and-mode.html">vite官方文档</a>）<br>这里的环境变量指的不是配置下载的软件的环境变量，而是指的如：开发环境、生产环境、测试环境等。</p><h3 id="vite配置文件"><a href="#vite配置文件" class="headerlink" title="vite配置文件"></a>vite配置文件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>()</span><br><span class="line">    ],<span class="comment">//配置插件，插件一般都是函数，导入后在数组里面运行</span></span><br><span class="line"><span class="comment">//视频中介绍了常用的插件vite-aliases、vite-plugin-html  </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">//这里写其他配置选项</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">//配置路径别名</span></span><br><span class="line">  <span class="attr">resolve</span>:&#123;</span><br><span class="line">    <span class="attr">alias</span>:&#123;</span><br><span class="line">      <span class="string">&quot;@&quot;</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./src&quot;</span>)</span><br><span class="line">      <span class="string">&quot;@assets&quot;</span>:path.<span class="title function_">resolve</span>(__dirname,<span class="string">&quot;./src/assets&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="attr">css</span>:&#123;</span><br><span class="line">    <span class="comment">//对CSS行为进行配置</span></span><br><span class="line">    <span class="comment">//modules配置最终会丢给postcss modules</span></span><br><span class="line">    <span class="attr">modules</span>:&#123;</span><br><span class="line">        <span class="comment">//对CSS模块化的默认行为进行配置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>:&#123;</span><br><span class="line">        <span class="comment">//对CSS预处理器进行处理</span></span><br><span class="line">        <span class="attr">less</span>:&#123;&#125;</span><br><span class="line">        <span class="attr">sass</span>:&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">devSourcemap</span>:<span class="literal">true</span><span class="comment">//设置索引文件</span></span><br><span class="line">    <span class="attr">postcss</span>:&#123;</span><br><span class="line">      <span class="attr">plugins</span>:[<span class="title function_">postcssPrestEnv</span>()]<span class="comment">//需要require(&quot;postcss-preset-env&quot;)</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//打包后的配置</span></span><br><span class="line">  <span class="attr">build</span>:&#123;</span><br><span class="line">    <span class="attr">rollupOptions</span>:&#123;<span class="comment">//配置rollup的构建策略</span></span><br><span class="line">      <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">//控制输出</span></span><br><span class="line">        <span class="attr">assetFileNames</span>:<span class="string">&quot;[hash].[name].[ext]&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">assetsInlineLimit</span>:<span class="number">4096</span><span class="comment">//控制图片大小，如果大于4096b就会转换为base64字符</span></span><br><span class="line">    <span class="attr">outDir</span>:<span class="string">&quot;dist&quot;</span><span class="comment">//打包输出文件命名</span></span><br><span class="line">    <span class="attr">assetsDir</span>:<span class="string">&quot;static&quot;</span><span class="comment">//静态资源目录</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="关于postcss"><a href="#关于postcss" class="headerlink" title="关于postcss"></a>关于postcss</h4><p>用于处理 CSS 的工具，它允许开发者通过 JavaScript 插件来转换 CSS。其核心理念是将 CSS 解析成抽象语法树（AST），然后通过各种插件对其进行操作和转换。postcss对于CSS如babel对于js。目前在vite中专门配置较少</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> vite </tag>
            
            <tag> 构建工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客开发项目学习</title>
      <link href="/2024/10/25/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/10/25/%E5%8D%9A%E5%AE%A2%E5%BC%80%E5%8F%91%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>为了复习之前学习的前端知识还有快速学习一下express，我跟着B站上的一个教程做了个全栈的博客相关功能实现的全栈项目（<a href="https://www.bilibili.com/video/BV1t3411F7VH">这是链接</a>）。做完项目后对自己学习或者复习到的一些内容做点整理</p><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><p>后端方面主要就是通过express对数据库的CRUD。在app.js中引入相关的依赖（express，path，multer，数据库相关），实例化一个express对象：<code>const app = express()</code>，设置中间件（跨域请求处理、JSON处理、上传、静态路径、token验证、路由设置）,最后在对应端口设置监听：<code>app.listen(port,callback)</code></p><h3 id="路由的设置"><a href="#路由的设置" class="headerlink" title="路由的设置"></a>路由的设置</h3><p>路由用于定义处理 HTTP 请求的端点，将路由文件全放入router文件夹下方便统一管理，在路由文件中引入依赖（express、router、数据库相关，以及其他工具函数和实现功能所需要的依赖等）。在路由模块中通过实现诸如<code>router.get(&#39;/xx&#39;,(req,res)=&gt;xxx)</code>等方法后，在路由模块末尾导出<code>module.exports = router</code>,最后在主文件app.js中使用中间件引入<code>app.use(&#39;/xxx&#39;,require(routerPath))</code>,访问时在对应端口的<code>/xx/xxx</code>下</p><h3 id="数据库的连接和使用"><a href="#数据库的连接和使用" class="headerlink" title="数据库的连接和使用"></a>数据库的连接和使用</h3><p>这里我使用的是MySQL+(mysql2&#x2F;promise)包。创建一个存放工具函数的文件夹（可以存放数据库相关和id生成之类的函数），创建一个文件<code>db.js</code>,引入mysql相关依赖，根据该包的文档创建连接对象，最后<code>module.exports=&#123;db,genid&#125;</code>，在其他需要该模块的文件中引入。</p><h3 id="登陆和token的验证"><a href="#登陆和token的验证" class="headerlink" title="登陆和token的验证"></a>登陆和token的验证</h3><p>个人觉得该教程中的实现不太好，待我进一步学习。</p><h3 id="关于next"><a href="#关于next" class="headerlink" title="关于next()"></a>关于next()</h3><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><p>前端是用vue3写的，实践中主要是前面学的东西太久没用忘记了，需要重新捡起来一下</p><h3 id="inject和provide"><a href="#inject和provide" class="headerlink" title="inject和provide"></a>inject和provide</h3><p>父组件通过 <code>provide</code> 提供数据，子组件使用 <code>inject</code> 获取数据。<br>例如在本项目中先在入口文件<code>main.js</code>中设置axios：<code>axios.defaults.baseURL=&quot;http://localhost:8080&quot;</code>，然后通过<code>app.provide(&quot;axios&quot;,axios)</code>并且在需要使用aixos的文件中<code>const axios = inject(&quot;axios&quot;)</code>引入，（注意在app实例化后），从而避免在组件或者路由中重新设置。<br><code>provide</code>也可以在vue组件中的父组件使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">setup() &#123;</span><br><span class="line">   const user = reactive(&#123; name: &#x27;Alice&#x27;, age: 25 &#125;);</span><br><span class="line">   provide(&#x27;user&#x27;, user);</span><br><span class="line"></span><br><span class="line">   const message = &#x27;Hello from parent!&#x27;;</span><br><span class="line">   provide(&#x27;greeting&#x27;, message);  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>然后直接在子组件中使用(provide 数据只能在子组件（包括深层嵌套组件）中被注入)</p><h3 id="路由相关"><a href="#路由相关" class="headerlink" title="路由相关"></a>路由相关</h3><p>创建专门的router.js文件引入vue-router进行配置，定义路由规则routes，然后<code>const router = createRouter(&#123;path:&quot;/xxx&quot;,name:xxx,component:()=&gt;import(&quot;path/xxx.vue&quot;)&#125;)</code>并且<code>export &#123;router,routes&#125;</code>，在入口文件main.js引入:<code>app.use(router);</code><br>路由的视图组件<code>xxx.vue</code>通常放在<code>src/views</code>目录下。在需要的应用组件中(注意必须在根组件（如 App.vue）中包含 <router-view />，这是 Vue Router 渲染匹配组件的必要部分。没有它，路由匹配的组件将无法在应用中显示。)，使用 <code>&lt;router-link&gt;</code> 来导航不同的路由，并使用 <code>&lt;router-view&gt;</code> 来渲染当前匹配的视图。（创建视图组件时，不需要在每个视图组件中显式引入 router.js。视图组件（XXX.vue）只需定义其内容和逻辑，路由配置已经在 router.js 中完成，并在 main.js 中全局注册。）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;nav&gt;</span><br><span class="line">     &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt;</span><br><span class="line">     &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class="line">   &lt;/nav&gt;</span><br><span class="line">   &lt;router-view /&gt;</span><br><span class="line"> &lt;/div&gt;</span><br></pre></td></tr></table></figure><p>在本项目中由于跳转路由的按钮选项是引入的naiviUI，所以需要为跳转路由写逻辑（使用<code>useRouter().push(&quot;/xxx&quot;)</code>）,而没使用router-link标签。</p><h4 id="学到的新的东西"><a href="#学到的新的东西" class="headerlink" title="学到的新的东西"></a>学到的新的东西</h4><ul><li>路由守卫：如果需要在路由进入或离开时执行一些逻辑，可以使用路由守卫。在main.js中：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 这里可以添加逻辑，例如认证检查</span></span><br><span class="line">  <span class="title function_">next</span>();  <span class="comment">// 必须调用 next() 以继续导航</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>路由嵌套：在需要添加子路由的视图页面中使用<router-view />并在配置文件<code>router.js</code>中的路由规则<code>routes</code>中视图页面对应的对象添加一个Children属性即可</li><li>useRoute()和useRouter():这是<code>vue-router</code>中的两个重要的 <strong>Composition</strong> API 函数,useRoute() 用于获取当前路由的信息，包括路径、参数、查询字符串等。返回一个响应式对象，包含当前路由的信息。useRouter() 用于访问路由实例，提供了编程式导航和路由控制的方法。如 <code>push()</code>,<code> replace()</code>,<code>go()</code> 等<br>如本项目中跳转页面时添加查询参数和详情页面获取该路由对应的查询参数:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转页面时添加查询参数, 使用router-link时的写法：&lt;router-link :to=&quot;&#123; path: &#x27;/about&#x27;, query: &#123; id: 123, name: &#x27;Alice&#x27; &#125; &#125;&quot;&gt;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">toDetail</span> = <span class="keyword">async</span> (<span class="params">blog</span>)=&gt;&#123;</span><br><span class="line">    router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/detail&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:blog.<span class="property">id</span>&#125;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//详情页面获取该路由对应的查询参数</span></span><br><span class="line"><span class="keyword">const</span> route=<span class="title function_">useRoute</span>();</span><br><span class="line"><span class="keyword">let</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&quot;/blog/detail?id=&quot;</span>+route.<span class="property">query</span>.<span class="property">id</span>); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">useRoute() 返回的对象：当你调用 useRoute() 时，它返回的对象是响应式的。这意味着，当路由发生变化（如导航到不同的页面）时，模板会自动更新。 </span></span><br><span class="line"><span class="comment">可直接在模板中使用：</span></span><br><span class="line"><span class="comment">&lt;p&gt;ID: &#123;&#123; route.query.id &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">&lt;p&gt;Name: &#123;&#123; route.query.name &#125;&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="pinia相关"><a href="#pinia相关" class="headerlink" title="pinia相关"></a>pinia相关</h3><p>使用pinia实现状态管理。安装依赖后，在入口文件导入<code>createPinia()</code>,然后<code>app.use(createPinia())</code>,创建个文件夹Stores，在该文件夹下创建一个管理状态的js文件。<br>在该JS文件中引入<code>defineStore</code>，然后<code>export</code>导出，写法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span>  <span class="string">&quot;pinia&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title class_">XXXStore</span> = <span class="title function_">defineStore</span>(<span class="string">&quot;xxx&quot;</span>,&#123;</span><br><span class="line">    <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">id</span>:<span class="number">0</span>,</span><br><span class="line">            <span class="attr">account</span>:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="attr">token</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    或者是：</span></span><br><span class="line"><span class="comment">     state: () =&gt; (&#123;</span></span><br><span class="line"><span class="comment">            id:0,</span></span><br><span class="line"><span class="comment">            account:&#x27;&#x27;,</span></span><br><span class="line"><span class="comment">            token:&#x27;&#x27;</span></span><br><span class="line"><span class="comment">  &#125;),注意&#123;&#125;外面必须有一对()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="attr">actions</span>:&#123;actionFunc1,actionFunc2,...&#125;,</span><br><span class="line">    <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后就可以在需要的vue组件或者js(如main.js)中引入状态管理了<code>import &#123;XXXstore&#125; from &#39;./Stores/xxx.js&#39;</code><br>引入后<code>const xxxStore = XXXstore();</code><br>在 web 开发中，状态管理通常在以下情况下使用：</p><ul><li><p>共享状态： 当多个组件需要访问和更新同一份状态时，例如用户登录信息、购物车内容或主题设置。</p></li><li><p>复杂组件树： 在大型应用中，组件之间的层级关系可能会很复杂。状态管理可以简化状态传递，避免层层传递 props。</p></li><li><p>全局状态： 需要在不同页面或不同视图中保持一致的状态，例如用户偏好设置、应用配置或认证状态。</p></li><li><p>异步数据管理： 当需要处理异步请求（如 API 调用）并将数据存储在状态中，状态管理可以帮助跟踪数据加载状态和错误处理。</p></li><li><p>表单和输入状态： 在复杂表单中，状态管理可以帮助统一管理表单输入的状态和验证逻辑。</p></li><li><p>状态持久化： 在需要保存用户状态（如主题、语言选择）到本地存储或其他持久化机制时，状态管理库通常提供相关功能。</p></li><li><p>性能优化： 在需要优化组件渲染性能时，使用状态管理可以避免不必要的渲染，提高应用的响应速度。</p></li></ul><p>如在本项目中的login.vue组件中使用<code>const adminStore=AdminStore();adminStore.token = result.data.data.token;adminStore.account = result.data.data.account;adminStore.id=result.data.data.id;</code> 来储存调用接口后得到的信息。然后可以在其他组件中使用被存储的信息。本项目中是在<code>main.js</code>中设置拦截器来将<code>adminStore</code>存储的token添加到每次请求的请求头中，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">config</span>)=&gt;</span>&#123;</span><br><span class="line">  config.<span class="property">headers</span>.<span class="property">token</span>=adminStore.<span class="property">token</span>;</span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;)<span class="comment">//需要配合provide和inject</span></span><br></pre></td></tr></table></figure><p>pinia除了上述选项式写法外，还有种新的组合式写法，详细参考：<a href="https://juejin.cn/post/7271076750351548457">https://juejin.cn/post/7271076750351548457</a> 和 <a href="https://juejin.cn/post/7057439040911441957">https://juejin.cn/post/7057439040911441957</a></p><h3 id="localStorage的使用"><a href="#localStorage的使用" class="headerlink" title="localStorage的使用"></a>localStorage的使用</h3><p>也是在本项目的login页面用到。localStorage 是 <strong>原生JavaScript</strong> 的 API。<code>localStorage.setItem(&#39;key&#39;, &#39;value&#39;);</code>来存储数据，<code>const value = localStorage.getItem(&#39;key&#39;);</code>来获取数据，<code>localStorage.removeItem(&#39;key&#39;);</code>来删除，<code>localStorage.clear();</code>清空所有数据。<br>注意事项：</p><ul><li>localStorage 只能存储字符串类型的数据。如果你需要存储对象，可以使用 JSON.stringify() 和 JSON.parse() 来转换：</li><li>localStorage 的数据是持久化的，即使浏览器关闭后也会保留，直到被删除。</li></ul><h3 id="项目结构的改进"><a href="#项目结构的改进" class="headerlink" title="项目结构的改进"></a>项目结构的改进</h3><ul><li>在使用pinia时，可以在store文件夹下创建个index.js文件将其他的store文件如xxx.js用<code>export &#123;xxx&#125; from &#39;./xxx.js&#39;</code>或者<code>export * from &#39;./xxx.js&#39;</code>统一导出。有助于保持项目的组织性和可维护性</li></ul>]]></content>
      
      
      <categories>
          
          <category> 项目学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu上开始学习docker</title>
      <link href="/2024/10/21/docker-learning-start/"/>
      <url>/2024/10/21/docker-learning-start/</url>
      
        <content type="html"><![CDATA[<p>之前一直是在Windows上学习，对于linux（centOS）只是在跟着b站上的视频学习一些基础的操作和命令。还有之前一直是在学习前端相关的内容，现在想了解一些后端的技术栈，于是我开始在Ubuntu上学习docker，顺便熟悉一下ubuntu。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>Ubuntu24.04.1、VM虚拟机</p><h2 id="docker的安装及ubuntu命令的熟悉"><a href="#docker的安装及ubuntu命令的熟悉" class="headerlink" title="docker的安装及ubuntu命令的熟悉"></a>docker的安装及ubuntu命令的熟悉</h2><p>先在终端中更新apt命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update </span><br><span class="line"><span class="built_in">sudo</span> apt upgrade -y</span><br></pre></td></tr></table></figure><p>然后安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install  ca-certificates curl gnupg lsb-release -y</span><br></pre></td></tr></table></figure><p>以下是这些包的作用：</p><ul><li><p>ca-certificates：用于管理和存储SSL&#x2F;TLS证书。这些证书确保在通过HTTPS进行安全连接时，服务器的身份可以被验证。</p></li><li><p>curl：一个用于从命令行传输数据的工具，支持多种协议，包括HTTP和HTTPS。通常用来下载文件或与API进行交互。</p></li><li><p>gnupg：GNU隐私保护系统，用于加密和签名数据及通信。它提供了生成和管理公钥&#x2F;私钥对的功能。</p></li><li><p>lsb-release：提供Linux标准基础（LSB）信息的工具，用于识别当前Linux发行版的版本号和相关信息。<br>其中-y参数表示对自动确认安装</p></li></ul><h3 id="添加Docker的GPG-Key"><a href="#添加Docker的GPG-Key" class="headerlink" title="添加Docker的GPG Key"></a>添加Docker的GPG Key</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> install -m 0755 -d /etc/apt/keyrings</span><br><span class="line">$ <span class="built_in">sudo</span> curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc</span><br><span class="line">$ <span class="built_in">sudo</span> <span class="built_in">chmod</span> a+r /etc/apt/keyrings/docker.asc</span><br></pre></td></tr></table></figure><ul><li>第一行命令创建&#x2F;etc&#x2F;apt&#x2F;keyrings 目录，权限设置为 0755（即目录所有者可以读、写、执行，其他用户只能读和执行）。这个目录用于存放 APT 软件源的 GPG 密钥。</li><li>第二行从 Docker 官方网站下载其 GPG 密钥，并保存到 &#x2F;etc&#x2F;apt&#x2F;keyrings&#x2F;docker.asc 文件中。GPG（GNU Privacy Guard）密钥用于验证从 Docker 仓库下载的软件包的完整性和真实性。</li><li>第三行为 GPG 密钥文件赋予所有用户的读取权限。确保系统中的所有用户或进程都能读取这个密钥，以便 APT 在安装 Docker 包时能进行验证。</li></ul><p>我在进行第二行命令时出现了报错<code>curl: (35) Recv failure: Connection reset by peer</code>，更新了ca-certificates:<code>sudo apt update &amp;&amp; sudo apt install --reinstall ca-certificates</code>之后正常执行</p><h3 id="安装密钥后添加到apt存储库中"><a href="#安装密钥后添加到apt存储库中" class="headerlink" title="安装密钥后添加到apt存储库中"></a>安装密钥后添加到apt存储库中</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> \</span><br><span class="line">  <span class="string">&quot;deb [arch=<span class="subst">$(dpkg --print-architecture)</span> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">  <span class="subst">$(. /etc/os-release &amp;&amp; echo <span class="string">&quot;<span class="variable">$VERSION_CODENAME</span>&quot;</span>)</span> stable&quot;</span> | \</span><br><span class="line">  <span class="built_in">sudo</span> <span class="built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null</span><br></pre></td></tr></table></figure><p>然后就可以正式开始安装了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> apt update</span><br><span class="line">$ <span class="built_in">sudo</span> apt install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y</span><br></pre></td></tr></table></figure><p>下列命令将本地用户添加到 docker 组，以便本地用户可以不使用 sudo 运行 docker 命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">sudo</span> groupadd docker</span><br><span class="line">$ <span class="built_in">sudo</span> usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">$ newgrp docker</span><br><span class="line">$ docker --version</span><br></pre></td></tr></table></figure><p>检查docker服务状态</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ systemctl status docker</span><br></pre></td></tr></table></figure><p>执行<code>docker run hello-world</code>报错，需要更换源</p><h3 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h3><p>在网上搜索了些可用的镜像源后更改&#x2F;etc&#x2F;docker&#x2F;daemon&#x2F;json后，<code>sudo systemctl restart docker</code><br>后已经能够成功运行</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 后端 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/10/14/hello-world/"/>
      <url>/2024/10/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> helloWorld </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
